nameOverride: ""
fullnameOverride: ""

global:
#  replicaCount: 1
  pullPolicy: IfNotPresent
  imagePullSecrets: []
  labels: {}
  # minReadySeconds: 0
  annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: "kubernetes.io/arch"
    #         operator: In
    #         values: ["amd64"]
    # podAntiAffinity:
    #   preferredDuringSchedulingIgnoredDuringExecution:
    #   - podAffinityTerm:
    #       labelSelector:
    #         matchExpressions:
    #         - key: app.kubernetes.io/name
    #           operator: In
    #           values:
    #             - standardnotes
    #       topologyKey: "kubernetes.io/hostname"
    #     weight: 100
  resources: {}
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # limits:
    #   cpu: 200m
    #   memory: 256Mi
  env: []
  # - name: AUTH_JWT_SECRET
  #   value: ""
  envFrom: []
  # - configMapRef:
  #     name: example-env
  # - secretRef:
  #     name: example-secret
  livenessProbe: {}
    # httpGet:
    #   path: /healthcheck
    #   port: 3000
    # initialDelaySeconds: 10
    # periodSeconds: 15
  readinessProbe: {}
  
api:
  image:
    repository: "standardnotes/api-gateway"
    tag: "1.40.1"
    pullPolicy: Always
  name: "api"
  replicaCount: 1
  selectorID: "api-gateway"
  port: 3000
  resources: {}
    # limits:
    #   cpu: "100m"
    #   memory: "128Mi"
    # requests:
    #   cpu: "25m"
    #   memory: "32Mi"
  env: []
  # - name: AUTH_JWT_SECRET
  #   value: ""
  envFrom: []
  # - configMapRef:
  #     name: example-env
  # - secretRef:
  #     name: example-secret
  minReadySeconds: 10

auth:
  image:
    repository: "standardnotes/auth"
    tag: "1.46.4"
    pullPolicy: Always
  name: "auth"
  replicaCount: 1
  workerReplicaCount: 1
#  selectorManagerID: "auth-man"
#  selectorWorkerID: "auth-work"
  port: 3000
  resources: {}
    # limits:
    #   cpu: "100m"
    #   memory: "128Mi"
    # requests:
    #   cpu: "25m"
    #   memory: "32Mi"
  env: []
  # - name: AUTH_JWT_SECRET
  #   value: ""
  envFrom: []
  # - configMapRef:
  #     name: example-env
  # - secretRef:
  #     name: example-secret
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 100
    # targetMemoryUtilizationPercentage: 80
    targetCPUUtilizationPercentage: 80

sync:
  image:
    repository: "standardnotes/syncing-server-js"
    tag: "1.55.0"
    pullPolicy: Always
  name: "sync"
  replicaCount: 1
  workerReplicaCount: 1
#  selectorManagerID: "sync-man"
#  selectorWorkerID: "sync-work"
  port: 3000
  resources: {}
    # limits:
    #   cpu: "100m"
    #   memory: "128Mi"
    # requests:
    #   cpu: "25m"
    #   memory: "32Mi"
  env: []
  # - name: AUTH_JWT_SECRET
  #   value: ""
  envFrom: []
  # - configMapRef:
  #     name: example-env
  # - secretRef:
  #     name: example-secret
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 100
    # targetMemoryUtilizationPercentage: 80
    targetCPUUtilizationPercentage: 80

redis:
  enabled: false

database:
  enabled: false
  generateRandomPassword: false
  existingSecret: ""

serviceAccount:
  mount: false
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
